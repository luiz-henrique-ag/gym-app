// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Objective {
  HYPERTROPHY
  STRENGTH
  WEIGHTLOSS
  HEALTH
}

model Client {
  subscription Int @id @default(autoincrement())

  name      String
  email     String
  document  String    @db.VarChar(14)
  cellphone String    @db.VarChar(14)
  birthDate DateTime?

  height    Int
  weight    Float
  objective Objective

  payments Payment[]
  dueDate  String

  observacoes String
  fichas      Workout[]

  ClientPlanHistory ClientPlanHistory[]
  ClientPlan        ClientPlan[]
}

model ClientPlanHistory {
  plan  String
  value Float

  clientSubscription Int    @unique
  client             Client @relation(fields: [clientSubscription], references: [subscription])
}

model ClientPlan {
  planId Int  @unique
  plan   Plan @relation(fields: [planId], references: [id])

  clientSubscription Int    @unique
  client             Client @relation(fields: [clientSubscription], references: [subscription])

  @@id([planId, clientSubscription])
}

enum PaymentStatus {
  PENDING
  PAID
  DUE
}

model Payment {
  plan   String
  value  Float
  status PaymentStatus

  dueDate     DateTime
  paymentDate DateTime?

  clientSubscription Int    @unique
  Client             Client @relation(fields: [clientSubscription], references: [subscription])
}

model Plan {
  id Int @id @default(autoincrement())

  name        String
  description String
  value       Float

  ClientPlan ClientPlan[]
}

model Personal {
  id Int @id @default(autoincrement())

  name      String
  email     String
  document  String   @db.VarChar(14)
  cellphone String   @db.VarChar(14)
  birthDate DateTime
}

model Exercise {
  id   Int    @id @default(autoincrement())
  name String

  WorkoutExercise WorkoutExercise[]
}

model Workout {
  id Int @id @default(autoincrement())

  name        String
  description String

  exercises WorkoutExercise[]

  clientSubscription Int
  client             Client @relation(fields: [clientSubscription], references: [subscription])
}

model WorkoutExercise {
  workoutId Int     @unique
  workout   Workout @relation(fields: [workoutId], references: [id])

  exerciseId Int      @unique
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  sets Int
  reps Int

  @@id([workoutId, exerciseId])
}
